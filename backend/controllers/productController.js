import asyncHandler from '../middleware/asyncHandler.js';
import { Product, Review, ProductVariant, User, Category, sequelize } from '../models/sql/index.js';
import { Op } from 'sequelize';

// @desc    Fetch all products
// @route   GET /api/products
// @access  Public
const getProducts = asyncHandler(async (req, res) => {
  const pageSize = 10;
  const page = Number(req.query.page) || 1;
  const keyword = req.query.keyword || '';

  const whereClause = {};
  if (keyword) {
    whereClause.name = { [Op.iLike]: `%${keyword}%` };
  }

  const { count, rows: products } = await Product.findAndCountAll({
    where: whereClause,
    include: [
      { model: Category, attributes: ['id', 'name'] },
      { model: User, attributes: ['id', 'name'] }
    ],
    limit: pageSize,
    offset: pageSize * (page - 1),
    distinct: true, // Needed for correct count with includes
  });

  res.json({ products, page, pages: Math.ceil(count / pageSize) });
});

// @desc    Fetch single product
// @route   GET /api/products/:id
// @access  Public
const getProductById = asyncHandler(async (req, res) => {
  const product = await Product.findByPk(req.params.id, {
    include: [
      { model: Category, attributes: ['id', 'name'] },
      { model: User, attributes: ['id', 'name'] }, // User who created the product
      {
        model: Review,
        include: [{ model: User, attributes: ['id', 'name', 'email'] }] // User who wrote the review
      },
      { model: ProductVariant }
    ]
  });
  
  if (product) {
    res.json(product);
  } else {
    res.status(404);
    throw new Error('Product not found');
  }
});

// @desc    Create a product
// @route   POST /api/products
// @access  Private/Admin
const createProduct = asyncHandler(async (req, res) => {
  const { name, price, images, brand, categoryId, countInStock, description, variants } = req.body;

  // Basic product data, slug will be auto-generated by hook
  const product = await Product.create({
    name: name || 'Sample name',
    price: price || 0,
    userId: req.user.id,
    images: images || ['/images/sample.jpg'],
    brand: brand || 'Sample brand',
    categoryId: categoryId || null, // Ensure this is a valid ID or null
    countInStock: countInStock || 0,
    description: description || 'Sample description',
  });

  if (variants && variants.length > 0) {
    const productVariants = variants.map(variant => ({
      ...variant,
      productId: product.id,
    }));
    await ProductVariant.bulkCreate(productVariants);
  }

  // Refetch product with associations to return complete data
  const createdProduct = await Product.findByPk(product.id, {
    include: [Category, User, ProductVariant]
  });
  res.status(201).json(createdProduct);
});

// @desc    Update a product
// @route   PUT /api/products/:id
// @access  Private/Admin
const updateProduct = asyncHandler(async (req, res) => {
  const {
    name,
    price,
    description,
    images,
    brand,
    categoryId,
    countInStock,
    isFeatured, // Added isFeatured
    variants
  } = req.body;

  const product = await Product.findByPk(req.params.id);

  if (product) {
    product.name = name || product.name;
    product.price = price !== undefined ? price : product.price;
    product.description = description || product.description;
    product.images = images || product.images;
    product.brand = brand || product.brand;
    product.categoryId = categoryId !== undefined ? categoryId : product.categoryId;
    product.countInStock = countInStock !== undefined ? countInStock : product.countInStock;
    product.isFeatured = isFeatured !== undefined ? isFeatured : product.isFeatured;
    // Slug is updated by hook if name changes

    if (variants) { // If variants array is part of the request (can be empty to delete all)
      await ProductVariant.destroy({ where: { productId: product.id } });
      if (variants.length > 0) {
        const productVariants = variants.map(variant => ({
          ...variant, // should include name, value, price, countInStock, sku
          productId: product.id,
        }));
        await ProductVariant.bulkCreate(productVariants);
      }
    }

    await product.save();

    // Refetch product with associations to return complete data
    const updatedProduct = await Product.findByPk(product.id, {
      include: [Category, User, Review, ProductVariant]
    });
    res.json(updatedProduct);
  } else {
    res.status(404);
    throw new Error('Product not found');
  }
});

// @desc    Delete a product
// @route   DELETE /api/products/:id
// @access  Private/Admin
const deleteProduct = asyncHandler(async (req, res) => {
  const product = await Product.findByPk(req.params.id);

  if (product) {
    await product.destroy(); // Reviews and Variants should be cascade deleted
    res.json({ message: 'Product removed' });
  } else {
    res.status(404);
    throw new Error('Product not found');
  }
});

// @desc    Create new review
// @route   POST /api/products/:id/reviews
// @access  Private
const createProductReview = asyncHandler(async (req, res) => {
  const { rating, comment } = req.body;
  const productId = req.params.id;

  const product = await Product.findByPk(productId);

  if (product) {
    const alreadyReviewed = await Review.findOne({
      where: { productId: product.id, userId: req.user.id },
    });

    if (alreadyReviewed) {
      res.status(400);
      throw new Error('Product already reviewed');
    }

    await Review.create({
      name: req.user.name, // Assuming req.user.name is available
      rating: Number(rating),
      comment,
      userId: req.user.id,
      productId: product.id,
    });

    await product.updateRatingStats(); // Call instance method to update numReviews and rating

    res.status(201).json({ message: 'Review added' });
  } else {
    res.status(404);
    throw new Error('Product not found');
  }
});

// @desc    Get top rated products
// @route   GET /api/products/top
// @access  Public
const getTopProducts = asyncHandler(async (req, res) => {
  const products = await Product.findAll({
    order: [['rating', 'DESC']],
    limit: 5, // As per subtask instruction, default Mongoose was 3
    include: [Category]
  });
  res.json(products);
});

// @desc    Get product by slug
// @route   GET /api/products/slug/:slug
// @access  Public
const getProductBySlug = asyncHandler(async (req, res) => {
  const product = await Product.findOne({
    where: { slug: req.params.slug },
    include: [
      { model: Category, attributes: ['id', 'name'] },
      { model: User, attributes: ['id', 'name'] },
      {
        model: Review,
        include: [{ model: User, attributes: ['id', 'name', 'email'] }]
      },
      { model: ProductVariant }
    ]
  });
  
  if (!product) {
    res.status(404);
    throw new Error('Product not found');
  }
  
  res.json(product);
});

// @desc    Get featured products
// @route   GET /api/products/featured
// @access  Public
const getFeaturedProducts = asyncHandler(async (req, res) => {
  const limit = Number(req.query.limit) || 10; // As per subtask instruction, default Mongoose was 5
  
  const products = await Product.findAll({
    where: { isFeatured: true },
    order: [['createdAt', 'DESC']], // Keep existing sort order
    limit: limit,
    include: [Category]
  });
  
  res.json(products);
});

// @desc    Get product counts
// @route   GET /api/products/count
// @access  Private/Admin
const getProductCount = asyncHandler(async (req, res) => {
  // Removed status: 'active' as it's not in Sequelize model
  const productCount = await Product.count();
  res.json({ count: productCount });
});

// @desc    Get products by category id
// @route   GET /api/products/category/:categoryId
// @access  Public
const getProductsByCategory = asyncHandler(async (req, res) => {
  // const { limit = 10, page = 1 } = req.query;
  // const categoryId = req.params.categoryId;
  // Hierarchical category fetching is complex with Sequelize without a dedicated library.
  // This was commented out in categoryController, so commenting out here too.
  res.status(501).json({ message: 'Not Implemented due to category hierarchy complexity' });
});


// Functions mentioned in subtask description but not in original file, will be added if routes exist for them.
// searchProducts, filterProducts, getRelatedProducts, uploadImages

export {
  getProducts,
  getProductById,
  createProduct,
  updateProduct,
  deleteProduct,
  createProductReview,
  getTopProducts,
  getProductBySlug, // Added back
  getFeaturedProducts, // Added back
  getProductCount, // Added back
  getProductsByCategory, // Commented out
}; 